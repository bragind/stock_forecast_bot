# bot.py
import asyncio
import logging
import os
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import FSInputFile

from utils.data_loader import load_stock_data
from models.model_selector import select_best_model
from utils.visualizer import plot_forecast
from utils.trading_strategy import generate_trading_recommendations
from utils.logger import log_request

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è (–¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)
from dotenv import load_dotenv
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
if not BOT_TOKEN:
    raise ValueError("–¢–æ–∫–µ–Ω Telegram-–±–æ—Ç–∞ –Ω–µ –∑–∞–¥–∞–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_BOT_TOKEN.")

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(storage=MemoryStorage())

class StockRequest(StatesGroup):
    ticker = State()
    amount = State()

@dp.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! üìà –í–≤–µ–¥–∏—Ç–µ —Ç–∏–∫–µ—Ä –∞–∫—Ü–∏–∏ (AAPL, MSFT, TSLA –∏ —Ç.–¥.):")
    await state.set_state(StockRequest.ticker)

@dp.message(StockRequest.ticker)
async def process_ticker(message: types.Message, state: FSMContext):
    ticker = message.text.strip().upper()
    if not ticker:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–∏–∫–µ—Ä.")
        return

    try:
        df = load_stock_data(ticker)
        await state.update_data(ticker=ticker, df=df)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ (–≤ USD):")
        await state.set_state(StockRequest.amount)
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {ticker}:\n{e}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Ç–∏–∫–µ—Ä (–Ω–∞–ø—Ä–∏–º–µ—Ä, AAPL).")
        await state.clear()

@dp.message(StockRequest.amount)
async def process_amount(message: types.Message, state: FSMContext):
    logging.info("–ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—É–º–º—ã")
    try:
        amount = float(message.text.strip())
        if amount <= 0:
            raise ValueError("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π.")
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1000).")
        return

    user_data = await state.get_data()
    ticker = user_data.get("ticker")
    df = user_data.get("df")

    if df is None or ticker is None:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à—ë–ª —Å–±–æ–π: –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ù–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ –∫–æ–º–∞–Ω–¥–æ–π /start.")
        await state.clear()
        return

    await message.answer("‚è≥ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –¥–∞–Ω–Ω—ã–µ –∏ —Å—Ç—Ä–æ—é –ø—Ä–æ–≥–Ω–æ–∑... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å 1‚Äì2 –º–∏–Ω—É—Ç—ã.")
    logging.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è {ticker}, —Å—É–º–º–∞: {amount}")

    try:
        best_model_info = select_best_model(df)
        logging.info("–ú–æ–¥–µ–ª—å –≤—ã–±—Ä–∞–Ω–∞")

        forecast = best_model_info["forecast"]
        model_name = best_model_info["model_name"]
        metric_value = best_model_info["metric_value"]
        logging.info(f"–ü—Ä–æ–≥–Ω–æ–∑ –¥–ª–∏–Ω–æ–π {len(forecast)} –¥–Ω–µ–π")

        img_path = plot_forecast(df, forecast)
        logging.info(f"–ì—Ä–∞—Ñ–∏–∫ —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {img_path}")

        recommendations = generate_trading_recommendations(forecast, amount)
        logging.info("–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω—ã")

        log_request(
            user_id=message.from_user.id,
            ticker=ticker,
            amount=amount,
            model_name=model_name,
            metric="MAPE",
            metric_value=metric_value,
            profit=recommendations["total_profit"]
        )
        logging.info("–ó–∞–ø—Ä–æ—Å –∑–∞–ª–æ–≥–∏—Ä–æ–≤–∞–Ω")

        await message.answer_photo(
            photo=FSInputFile(img_path),
            caption=(
                f"üìà –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 30 –¥–Ω–µ–π –ø–æ –∞–∫—Ü–∏–∏ {ticker}\n"
                f"–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã: {recommendations['price_change_pct']:.2f}%\n\n"
                f"üîç –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:\n{recommendations['summary']}\n\n"
                f"üí∞ –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å: ${recommendations['total_profit']:.2f}"
            )
        )
        logging.info("–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")

    except Exception as e:
        logging.exception("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–∏")
        error_msg = str(e)
        if "Close" in error_msg or "KeyError" in error_msg or "empty" in error_msg.lower():
            await message.answer(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ç–∏–∫–µ—Ä. –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
                "‚Ä¢ –¢–∏–∫–µ—Ä –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (–ø–æ–ø—Ä–æ–±—É–π—Ç–µ AAPL, MSFT, TSLA);\n"
                "‚Ä¢ –ù–µ—Ç –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö;\n"
                "‚Ä¢ –≠—Ç–æ –∏–Ω–¥–µ–∫—Å –∏–ª–∏ ETF, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Ç–∏–∫–µ—Ä."
            )
        else:
            await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–∏:\n{error_msg}")
    finally:
        await state.clear()

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())